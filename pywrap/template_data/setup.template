from distutils.core import setup
from distutils.extension import Extension
from distutils.sysconfig import get_config_vars
from Cython.Build import cythonize
import numpy
import os


def strict_prototypes_workaround():
    # Workaround to remove '-Wstrict-prototypes' from compiler invocation
    opt = get_config_vars('OPT')[0]
    os.environ['OPT'] = " ".join(flag for flag in opt.split()
                                 if flag != '-Wstrict-prototypes')


if __name__ == '__main__':
    strict_prototypes_workaround()

    extensions = [
        Extension(
            "{{ module }}",
            [
                "{{ module }}.pyx",
{%- for filename in filenames %}
                "{{ filename }}",
{%- endfor %}
            ],
            include_dirs=[
                "{{ sourcedir }}",
                numpy.get_include(),
{%- for incdir in incdirs %}
                "{{ incdir }}",
{%- endfor %}
            ],
            define_macros=[
                ("NDEBUG",),
             ],
            extra_compile_args=[
                "-std=c++11",
{%- for compiler_flag in compiler_flags %}
                "{{ compiler_flag }}",
{%- endfor %}
                # disable warnings caused by Cython using the deprecated
                # NumPy C-API
                "-Wno-cpp", "-Wno-unused-function"
            ],
            library_dirs=[
            {%- for library_dir in library_dirs %}
                "{{ library_dir }}",
            {%- endfor %}
            ],
            libraries=[
            {%- for library in libraries %}
                "{{ library }}",
            {%- endfor %}
            ],
            language="c++"
        )
    ]
    setup(ext_modules=cythonize(extensions))